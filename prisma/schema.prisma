generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String         @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime       @default(now())
  updated        DateTime       @updatedAt
  
  // The expenses created by this user
  expenses       Expense[]      @relation("ExpenseCreator")
  
  // The expenses this user paid for
  expensesPaid   Expense[]      @relation("ExpensePayer", fields: [expensesPaidId], references: [id])
  expensesPaidId String[]       @db.ObjectId
  groups         Group[]        @relation(fields: [groupIds], references: [id])
  groupIds       String[]       @db.ObjectId
  
  expenseSplits  ExpenseSplit[]
  giveTakeAmount GiveTakeAmount[]  // Updated model name for consistency
}

model Group {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  isGroup     Boolean?
  users       User[]       @relation(fields: [userIds], references: [id])
  userIds     String[]     @db.ObjectId
  createdAt   DateTime     @default(now())
  expenses    Expense[]
}

model Expense {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  description   String
  amount        Float
  createdAt     DateTime     @default(now())
  equalSplit    Boolean?     // Fixed spelling
  unequalSplit  Boolean?     // Fixed spelling
  createdBy     User         @relation("ExpenseCreator", fields: [createdById], references: [id])
  createdById   String       @db.ObjectId 
  paidBy        User[]       @relation("ExpensePayer", fields: [paidByIds], references: [id])
  paidByIds     String[]     @db.ObjectId
  group         Group        @relation(fields: [groupId], references: [id])
  groupId       String       @db.ObjectId
  splits        ExpenseSplit[]
}

model ExpenseSplit {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  user        User         @relation(fields: [userId], references: [id])
  userId      String       @db.ObjectId
  expense     Expense      @relation(fields: [expenseId], references: [id])
  expenseId   String       @db.ObjectId
  amount      Float        // The portion of the total expense this user needs to pay
  returnBackAmount Float?   // Fixed spelling
}

model GiveTakeAmount { // Updated model name to be consistent
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  user        User         @relation(fields: [receiverId], references: [id])
  receiverId      String       @db.ObjectId
  giverId      String[]     
  paidAmount  Float?
  toRecieveAmount  Float?
  toGiveAmount  Float?       // Fixed spelling
}
