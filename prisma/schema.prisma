generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String         @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime       @default(now())
  updated        DateTime       @updatedAt
  kharchOnUserInAmount  Float?
  // The expenses created by this user
  expenses       Expense[]      @relation("ExpenseCreator")
  //involve people in expese
  involepeople   Expense[]     @relation("ExpenseInvolvePeople",fields: [involvePeopleIds],references: [id])
  involvePeopleIds   String[]           @db.ObjectId
  // The expenses this user paid for
  expensesPaid   Expense[]      @relation("ExpensePayer", fields: [expensesPaidId], references: [id])
  expensesPaidId String[]       @db.ObjectId
  groups         Group[]        @relation(fields: [groupIds], references: [id])
  groupIds       String[]       @db.ObjectId
  
  expenseSplits  ExpenseSplit[]
  giveTakeAmount GiveTakeAmount[]  // Updated model name for consistency
    giveTakeGiver  GiveTakeAmount[]  @relation("GiveTake_Giver") // Opposite relation for giverUser

  // invitations Invitation[]
}

model Group {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  isGroup     Boolean?
  users       User[]       @relation(fields: [userIds], references: [id])
  userIds     String[]     @db.ObjectId
  createdAt   DateTime     @default(now())
  expenses    Expense[]
}

model Expense {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  description   String
  amount        Float
  createdAt     DateTime     @default(now())
  spliteType    String
  equalSplit    Boolean?     // Fixed spelling
  unequalSplit  Boolean?     // Fixed spelling
  createdBy     User         @relation("ExpenseCreator", fields: [createdById], references: [id])
  createdById   String       @db.ObjectId 
  paidBy        User[]       @relation("ExpensePayer", fields: [paidByIds], references: [id])
  paidByIds     String[]     @db.ObjectId
  involvePeopleOncharch User[] @relation("ExpenseInvolvePeople", fields: [involvePeopleOncharchIds], references: [id])
  involvePeopleOncharchIds     String[]     @db.ObjectId
  group         Group?      @relation(fields: [groupId], references: [id])
  groupId       String?       @db.ObjectId
  splits        ExpenseSplit[]
  giveTakeAmount GiveTakeAmount[]
  getBackAmount Float
}

model ExpenseSplit {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  user        User         @relation(fields: [userId], references: [id])
  userId      String       @db.ObjectId
  expense     Expense      @relation(fields: [expenseId], references: [id])
  expenseId   String       @db.ObjectId
  amount      Float        // The portion of the total expense this user needs to pay
  returnBackAmount Float?   // Fixed spelling
}

// model GiveTakeAmount { // Updated model name to be consistent
//   id          String       @id @default(auto()) @map("_id") @db.ObjectId
//   receiverUser        User         @relation(fields: [receiverId], references: [id])
//   receiverId      String       @db.ObjectId
//   giverId      String      @db.ObjectId
//   giverUser    User      @relation("giverUser",fields: [giverId],references: [id])
//   paidAmount  Float?
//   spliteType    String
//   toGiveInType  String?
//   toRecieveAmount  Float?
//   toGiveAmount  Float?       // Fixed spelling
//   expense     Expense      @relation(fields: [expenseId], references: [id])
//   expenseId   String       @db.ObjectId
// }
model GiveTakeAmount {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  receiverUser     User      @relation(fields: [receiverId], references: [id])
  receiverId       String    @db.ObjectId
  giverUser        User      @relation("GiveTake_Giver", fields: [giverId], references: [id]) // Changed from User[] to User
  giverId          String    @db.ObjectId // Changed from String[] to String
  paidAmount       Float?
  spliteType       String
  toGiveInType     String?
  toRecieveAmount  Float?
  toGiveAmount     Float?
  expense          Expense   @relation(fields: [expenseId], references: [id])
  expenseId        String    @db.ObjectId
}


model Invitation {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  token     String   @unique
  email     String
  senderId  String
  createdAt DateTime @default(now())
  expiresAt DateTime
  isUsed    Boolean  @default(false)
  // userId    String   @db.ObjectId
  // user      User     @relation(fields: [userId], references: [id])
}


